"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
# Construccion de table.indice
table.indice <- as.data.frame(matrix(nrow = 12, ncol = length(by.year)+2))
names(table.indice) <- c("mes", names(by.year), "variacion")
table.indice$mes <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
by.year.month <- split(x = by.year[["2017"]], f = cut(x = by.year[["2017"]][,"date"], breaks = "month"))
conteos <- lapply(X = by.year.month, FUN = function(x) sum(x[,"conteo"]))
table.conteo[1:length(conteos),"2017"] <- sapply(X = conteos, FUN = function(x){x[[1]]})
indices <- lapply(X = by.year.month, FUN = function(x) mean(x[,"indice"]))
table.indice[1:length(indices),"2017"] <- sapply(X = indices, FUN = function(x){x[[1]]})
by.year.month <- split(x = by.year[["2018"]], f = cut(x = by.year[["2018"]][,"date"], breaks = "month"))
conteos <- lapply(X = by.year.month, FUN = function(x) sum(x[,"conteo"]))
table.conteo[1:length(conteos),"2018"] <- sapply(X = conteos, FUN = function(x){x[[1]]})
indices <- lapply(X = by.year.month, FUN = function(x) mean(x[,"indice"]))
table.indice[1:length(indices),"2018"] <- sapply(X = indices, FUN = function(x){x[[1]]})
table.conteo$variacion <- ((table.conteo$'2018'-table.conteo$`2017`)*100)/table.conteo$`2017`
table.indice$variacion <- ((table.indice$'2018'-table.indice$`2017`)*100)/table.indice$`2017`
#Geraci?n de gr?fica de ?ndice
plot(x = 1:12, y = table.indice$variacion/100, type = 'o', xlab = "", lwd = 0.5,
lty = 1, ylim = c(-1, 1), pch=16, cex = .7, cex.axis = .7, xaxt="n")
axis(labels = table.indice[,"mes"], side = 1, at = 1:length(table.indice[,"mes"]), las = 2, cex.axis = .7)
abline(h = 0)
title.name <- dir.tiendas[dir.tiendas$id == id.names[i],]
title(main = paste("id:",title.name$id, "Estado:", title.name$estado, "Region:", title.name$region, "Tienda:", title.name$tienda, sep = " "))
}
}
names(by.year) <- week(names(by.year))
pdf(file = "v.id.pdf", width = 10)
for(i in 1: length(id.names)){
print(i)
subset <- subset(x = data, subset = data$id == id.names[i])
by.year <- split(x = subset, f = cut(x = subset$date, breaks = "years"))
names(by.year) <- week(names(by.year))
# levels(as.factor(year(subset$date)))))
if(length(by.year)==2){
# contruccion de table.conteo
table.conteo <- as.data.frame(matrix(nrow = 12, ncol = length(by.year)+2))
names(table.conteo) <- c("mes", names(by.year), "variacion")
table.conteo$mes <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
# Construccion de table.indice
table.indice <- as.data.frame(matrix(nrow = 12, ncol = length(by.year)+2))
names(table.indice) <- c("mes", names(by.year), "variacion")
table.indice$mes <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
by.year.month <- split(x = by.year[["2017"]], f = cut(x = by.year[["2017"]][,"date"], breaks = "month"))
conteos <- lapply(X = by.year.month, FUN = function(x) sum(x[,"conteo"]))
table.conteo[1:length(conteos),"2017"] <- sapply(X = conteos, FUN = function(x){x[[1]]})
indices <- lapply(X = by.year.month, FUN = function(x) mean(x[,"indice"]))
table.indice[1:length(indices),"2017"] <- sapply(X = indices, FUN = function(x){x[[1]]})
by.year.month <- split(x = by.year[["2018"]], f = cut(x = by.year[["2018"]][,"date"], breaks = "month"))
conteos <- lapply(X = by.year.month, FUN = function(x) sum(x[,"conteo"]))
table.conteo[1:length(conteos),"2018"] <- sapply(X = conteos, FUN = function(x){x[[1]]})
indices <- lapply(X = by.year.month, FUN = function(x) mean(x[,"indice"]))
table.indice[1:length(indices),"2018"] <- sapply(X = indices, FUN = function(x){x[[1]]})
table.conteo$variacion <- ((table.conteo$'2018'-table.conteo$`2017`)*100)/table.conteo$`2017`
table.indice$variacion <- ((table.indice$'2018'-table.indice$`2017`)*100)/table.indice$`2017`
#Geraci?n de gr?fica de ?ndice
plot(x = 1:12, y = table.indice$variacion/100, type = 'o', xlab = "", lwd = 0.5,
lty = 1, ylim = c(-1, 1), pch=16, cex = .7, cex.axis = .7, xaxt="n")
axis(labels = table.indice[,"mes"], side = 1, at = 1:length(table.indice[,"mes"]), las = 2, cex.axis = .7)
abline(h = 0)
title.name <- dir.tiendas[dir.tiendas$id == id.names[i],]
title(main = paste("id:",title.name$id, "Estado:", title.name$estado, "Region:", title.name$region, "Tienda:", title.name$tienda, sep = " "))
}
}
pdf(file = "v.id.pdf", width = 10)
for(i in 1: length(id.names)){
print(i)
subset <- subset(x = data, subset = data$id == id.names[i])
by.year <- split(x = subset, f = cut(x = subset$date, breaks = "years",
levels(as.factor(year(subset$date)))))
if(length(by.year)==2){
# contruccion de table.conteo
table.conteo <- as.data.frame(matrix(nrow = 12, ncol = length(by.year)+2))
names(table.conteo) <- c("mes", names(by.year), "variacion")
table.conteo$mes <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
# Construccion de table.indice
table.indice <- as.data.frame(matrix(nrow = 12, ncol = length(by.year)+2))
names(table.indice) <- c("mes", names(by.year), "variacion")
table.indice$mes <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
"Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
by.year.month <- split(x = by.year[["2017"]], f = cut(x = by.year[["2017"]][,"date"], breaks = "month"))
conteos <- lapply(X = by.year.month, FUN = function(x) sum(x[,"conteo"]))
table.conteo[1:length(conteos),"2017"] <- sapply(X = conteos, FUN = function(x){x[[1]]})
indices <- lapply(X = by.year.month, FUN = function(x) mean(x[,"indice"]))
table.indice[1:length(indices),"2017"] <- sapply(X = indices, FUN = function(x){x[[1]]})
by.year.month <- split(x = by.year[["2018"]], f = cut(x = by.year[["2018"]][,"date"], breaks = "month"))
conteos <- lapply(X = by.year.month, FUN = function(x) sum(x[,"conteo"]))
table.conteo[1:length(conteos),"2018"] <- sapply(X = conteos, FUN = function(x){x[[1]]})
indices <- lapply(X = by.year.month, FUN = function(x) mean(x[,"indice"]))
table.indice[1:length(indices),"2018"] <- sapply(X = indices, FUN = function(x){x[[1]]})
table.conteo$variacion <- ((table.conteo$'2018'-table.conteo$`2017`)*100)/table.conteo$`2017`
table.indice$variacion <- ((table.indice$'2018'-table.indice$`2017`)*100)/table.indice$`2017`
#Geraci?n de gr?fica de ?ndice
plot(x = 1:12, y = table.indice$variacion/100, type = 'o', xlab = "", lwd = 0.5,
lty = 1, ylim = c(-1, 1), pch=16, cex = .7, cex.axis = .7, xaxt="n")
axis(labels = table.indice[,"mes"], side = 1, at = 1:length(table.indice[,"mes"]), las = 2, cex.axis = .7)
abline(h = 0)
title.name <- dir.tiendas[dir.tiendas$id == id.names[i],]
title(main = paste("id:",title.name$id, "Estado:", title.name$estado, "Region:", title.name$region, "Tienda:", title.name$tienda, sep = " "))
}
}
id.names[45]
i <-45
subset <- subset(x = data, subset = data$id == id.names[i])
subset
by.year <- split(x = subset, f = cut(x = subset$date, breaks = "years",
levels(as.factor(year(subset$date)))))
by.year <- split(x = subset, f = cut(x = subset$date, breaks = "years"))
by.year
data <- read.csv(file = "/media/pavel/seagate-pavel/pogen/Pavel/tiendas/data/processed/data.csv")
str(data)
table(data$estado)
head(data)
str(data)
data <- data[c("id", "estado")]
head(data)
data <- unique(data)
head(data)
str(data)
table(data$estado)
data[data$estado=="Oaxaca",]
data[data$estado=="Hidalgo",]
setwd(dir = "/media/pavel/seagate-pavel/pogen/Pavel/")
source("scripts/updateData.R")
updateData(impFolder = "analisis/data/raw/pogen/2018/")
rm(list = ls())
?summary()
library(faraway)
install.packages("faraway")
library(faraway)
m=lm(taste~H2S, data=cheddar)
summary(m)
residuals(m)
summary(residuals())
summary(residuals(m))
sum(residuals(m))
m$fitted.values
sum(m$fitted.values)
sd(residuals(m))
install.packages("astsa", dependencies = T)
library(astsa)
help(astsa)
help(jj)
install.packages('rsconnect', dependencies = T)
rsconnect::setAccountInfo(name='pavelmedina',
token='B729F2F12785F87BDE2E2925F28F8EFF',
secret='<SECRET>')
rsconnect::setAccountInfo(name='pavelmedina',
token='B729F2F12785F87BDE2E2925F28F8EFF',
secret='9kgIZ90AayPVxQqK9GmMXphg7SIwkbN54X0SMCeI')
lines <- readLines("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
lines
as.data.frame("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
str(lines)
head(lines)
head(lines, 20)
titles <- lines[1:3]
data <- lines(5:length(lines))
5:length(lines)
data <- lines[5:length(lines)]
head(data)
data <- as.data.frame(data)
head(data)
data <- lines[5:length(lines)]
read.table(data)
read.table(https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for)
read.table(file = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
lines <- readLines("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
head(lines, 15)
?read.table
read.table(file = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
header = F, skip = 4)
lines <- readLines("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
lines
lines <- gsub(pattern = "\"", replacement = "", x = lines)
lines
lines <- readLines("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
lines <- gsub(pattern = "\"", replacement = "", x = lines)
lines
lines <- gsub(pattern = '\"', replacement = "", x = lines)
lines
lines <- gsub(pattern = '\'', replacement = "", x = lines)
lines
lines <- readLines("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
lines <- gsub("\"", "", lines)
lines
data <- lines[5:length(lines)]
head(data)
split <- strsplit(x = data, split = "     ")
split
head(split)
extract <- function(x){x[[1]][3]}
extract(split)
array
?apply
?sapply()
col <- sapply(X = split, FUN = extract)
col
col <- apply(X = split, FUN = extract)
extract <- function(x){[x]}
extract <- function(x){[x]}
extract <- function(x){x[[1]]}
extract(split)
extract <- function(x){x[[1]][3]}
extract(split)
sapply(X = split, FUN = extract)
sapply(split,extract)
split
head(split)
split[[1]]
split[[1]][3]
split[[1]][[3]]
extract <- function(x){x[[1]][[3]]}
extract(split)
sapply(split,extract)
sapply(split,extract)
extract <- function(x){x[[1]][3]}
extract(split)
sapply(split,extract)
t <- sapply(split,extract)
t
spluit
split
t <- sapply(split, "[",2)
t
t
t <- sapply(split, "[",3)
t
head(split)
head(t)
t2 <- strsplit(x = t, split = "-")
t2
head(split)
t2.1 <- sapply(t2, "[",1)
t2.1
t1
t2
t
t2 <- gsub(pattern = "-", replacement = " ", x = t2)
t2
t2 <- strsplit(x = t, split = "-")
t2
t2 <- gsub(pattern = " ", replacement = "-", x = t2)
t2
t2 <- strsplit(x = t, split = "-")
t2
t <- sapply(split, "[",3)
t
t <- gsub(pattern = " ", replacement = "-", x = t)
t
t2 <- strsplit(x = t, split = "-")
t2
t2.1 <- sapply(t2, "[",1)
t2.1
t2.1 <- as.numeric(t2.1)
summary(t2.1)
sum(t2.1)
split
sum(t2.1)
?xtabs
?ifelse
?melt
?melt
()
?melt()
library(reshape2)
?melt()
head(mtcars)
View(mtcars)
?tapply
?unlist
?ddply
?match
swirl()
library(swirl)
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette("red", "yellow")
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(pal(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha = .5)
p3(5)
plot(x,y,pch=19, col=rgb(0,.5,.5))
plot(x,y,pch=19, col=rgb(0,.5,.5, .3))
cols<-brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
swirl()
library(swirl)
swirl()
str(mpg)
qplot(displ,hwy,mpg)
qplot(x = displ,y = hwy,data = mpg)
qplot(x = displ,y = hwy,data = mpg, col = drv)
qplot(x = displ,y = hwy,data = mpg, color = drv)
qplot(x = displ,y = hwy,data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color=drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
library(lubridate)
installed.packages("lubridate")
install.packages("lubridate")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(lubridate)
library(tidyverse)
install.packages("tidyverse", dependencies = T)
library("devtools")
install.packages("devtools", dependencies = T)
library("devtools")
library(tidyverse)
install.packages("tidyverse", dependencies = T)
devtools::install_github("tidyverse/tidyverse")
devtools::install_github("tidyverse/tidyverse")
install.packages("htmlwidgets", dependencies = T)
library(htmlwidgets)
install.packages("htmltools",dependencies = T)
install.packages("htmltools",dependencies = T)
library(htmltools)
install.packages("flexdashboard", dependencies = T)
library(flexdashboard)
install.packages("mxmaps", dependencies = T)
install.packages("RColorBrewer", dependencies = T)
library(RColorBrewer)
install.packages("leaflet", dependencies = T)
library(leaflet)
install.packages("geojsonio", dependencies = T)
install.packages("jsonlite", dependencies = T)
install.packages("jsonlite", dependencies = T)
library(jsonlite)
install.packages("knitr", dependencies = T)
library(knitr)
install.packages("DT", dependencies = T)
library(DT)
install.packages("plotly", dependencies = T)
library(plotly)
install.packages("dygraphs", dependencies = T)
library(dygraphs)
install.packages("xts", dependencies = T)
library(xts)
devtools::install_github("tidyverse/tidyverse")
install.packages("tidyverse", dependencies = T)
install.packages("tidyverse", dependencies = T)
library(tidyverse) #NO
install.packages("tidyverse", dependencies = T)
devtools::install_github("tidyverse/tidyverse")
library(tidyverse) #NO
install.packages("htmlwidgets", dependencies = T)
library(tidyverse) #NO
install.packages("tidyverse", dependencies = T)
library(tidyverse) #NO
install.packages("mxmaps", dependencies = T) # NO
install.packages("dplyr", dependencies = T)
install.packages("dplyr", dependencies = T)
library(dplyr)
install.packages("geojsonio", dependencies = T) #NO
devtools::install_github('diegovalle/mxmaps')
install.packages("maptools", dependencies = T)
install.packages("spatstat", dependencies = T)
devtools::install_github('diegovalle/mxmaps')
install.packages("foreign", dependencies = T)
install.packages("maptools", dependencies = T)
devtools::install_github('diegovalle/mxmaps')
install.packages("mxmaps", dependencies = T) # NO
install.packages("Hmisc", dependencies = T)
devtools::install_github('diegovalle/mxmaps')
install.packages("cluster", dependencies = T)
devtools::install_github('diegovalle/mxmaps')
install.packages("tidyr", dependencies = T)
install.packages("scales", dependencies = T)
install.packages("stringi", dependencies = T)
install.packages("stringi", dependencies = T)
install.packages("geojsonio", dependencies = T) #NO
session_info()
session_Info()
sessionInfo()
library(htmlwidgets)
sessionInfo()
install.packages("htmltools", version='0.2.4')
install.packages("htmltools", version='0.2.4')
sessionInfo()
library(htmltools)
sessionInfo()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lpoints
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?splom
?trellis.par.set()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
moviews
movies
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
?xyplot()
es <- read.csv("/home/pavel/pogen/Pavel/investigaciones/feriados/covid19/reporte/Nacional/2020-04-11/estados"), sep = " ")
es <- read.csv("/home/pavel/pogen/Pavel/investigaciones/feriados/covid19/reporte/Nacional/2020-04-11/estados"),
sep = " ")
es <- read.csv("/home/pavel/pogen/Pavel/investigaciones/feriados/covid19/reporte/Nacional/2020-04-11/estados.csv"),
sep = " ")
es <- read.csv("/home/pavel/pogen/Pavel/investigaciones/feriados/covid19/reporte/Nacional/2020-04-11/estados.csv",
sep = " ")
es
head(es)
g <- es %>%
group_by(Estado) %>%
summarise(Casos_Confirmados = n()) %>%
arrange(desc(Casos_Confirmados))
library(dplyr)
g <- es %>%
group_by(Estado) %>%
summarise(Casos_Confirmados = n()) %>%
arrange(desc(Casos_Confirmados))
g$Estado <- gsub(pattern = "-", replacement = " ", x = g$Estado)
g
write.csv(x = g, file = "investigaciones/feriados/covid19/reporte/Nacional/2020-04-11/estados2.csv", row.names = F)
write.csv(x = g, file = "/home/pavel/pogen/Pavel/investigaciones/feriados/covid19/reporte/Nacional/2020-04-11/estados2.csv", row.names = F)
shiny::runApp('pogen/Pavel/github/mba')
runApp('pogen/Pavel/github/mba')
########################################################################################
########################################################################################
### Actualización: 2020-04-13 ####
library(lubridate)
library(dplyr)
setwd("/home/pavel/pogen/Pavel/")
rm(list = ls())
source(file = "scripts/Rpogen.R")
fecha <- "2020-04-13"
# Carga de nuevos y datos y creación de archivo de validación
tabla <- cc.indice2(fecha = fecha)
##############################################################
# Validación, es importante que el objeto tabla tenga todos los ids a considerar, basado principalmente
# en c.val
val <- read.csv(file = "investigaciones/indice/indicepogen2020/c.val.csv")
#tabla <- filter()
tabla <- filter(.data = tabla,
plaza_id %in%
filter(.data = val, n.2020.04.13 == 1)$plaza_id)
##############################################################
# Agrego la nueva información
cc.update2(fecha = fecha, tabla = tabla)
########################################################################################
########################################################################################
### Actualización: 2020-04-13 ####
library(lubridate)
library(dplyr)
setwd("/home/pavel/pogen/Pavel/")
rm(list = ls())
source(file = "scripts/Rpogen.R")
fecha <- "2020-04-13"
# Carga de nuevos y datos y creación de archivo de validación
tabla <- t.indice2(fecha = fecha)
##############################################################
# Validación, es importante que el objeto tabla tenga todos los ids a considerar, basado principalmente
# en c.val
val <- read.csv(file = "investigaciones/indice/indicepogen2020/t.val.csv")
##############################################################
# Agrego la nueva información
t.update2(fecha = fecha, tabla = tabla)
shiny::runApp('github/mba')
